// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ListUsersUserGetData, ListUsersUserGetResponse, ListUsersUserGetError, CreateUserUserPostData, CreateUserUserPostResponse, CreateUserUserPostError, DeleteUserUserUserIdDeleteData, DeleteUserUserUserIdDeleteResponse, DeleteUserUserUserIdDeleteError, GetUserUserUserIdGetData, GetUserUserUserIdGetResponse, GetUserUserUserIdGetError, UpdateUserUserUserIdPatchData, UpdateUserUserUserIdPatchResponse, UpdateUserUserUserIdPatchError, DeleteSessionSessionDeleteData, CreateSessionSessionPostData, CreateSessionSessionPostResponse, CreateSessionSessionPostError, ListEarthquakesEarthquakeGetData, ListEarthquakesEarthquakeGetResponse, ListEarthquakesEarthquakeGetError, CreateEarthquakeEarthquakePostData, CreateEarthquakeEarthquakePostResponse, CreateEarthquakeEarthquakePostError, DeleteEarthquakeEarthquakeEarthquakeIdDeleteData, DeleteEarthquakeEarthquakeEarthquakeIdDeleteResponse, DeleteEarthquakeEarthquakeEarthquakeIdDeleteError, GetEarthquakeEarthquakeEarthquakeIdGetData, GetEarthquakeEarthquakeEarthquakeIdGetResponse, GetEarthquakeEarthquakeEarthquakeIdGetError, UpdateEarthquakeEarthquakeEarthquakeIdPatchData, UpdateEarthquakeEarthquakeEarthquakeIdPatchResponse, UpdateEarthquakeEarthquakeEarthquakeIdPatchError, ListAlertsAlertGetData, ListAlertsAlertGetResponse, ListAlertsAlertGetError, CreateAlertAlertPostData, CreateAlertAlertPostResponse, CreateAlertAlertPostError, DeleteAlertAlertAlertIdDeleteData, DeleteAlertAlertAlertIdDeleteResponse, DeleteAlertAlertAlertIdDeleteError, GetAlertAlertAlertIdGetData, GetAlertAlertAlertIdGetResponse, GetAlertAlertAlertIdGetError, UpdateAlertAlertAlertIdPatchData, UpdateAlertAlertAlertIdPatchResponse, UpdateAlertAlertAlertIdPatchError, ListEventsEventGetData, ListEventsEventGetResponse, ListEventsEventGetError, CreateEventEventPostData, CreateEventEventPostResponse, CreateEventEventPostError, DeleteEventEventEventIdDeleteData, DeleteEventEventEventIdDeleteResponse, DeleteEventEventEventIdDeleteError, GetEventEventEventIdGetData, GetEventEventEventIdGetResponse, GetEventEventEventIdGetError, UpdateEventEventEventIdPatchData, UpdateEventEventEventIdPatchResponse, UpdateEventEventEventIdPatchError, ListZonesZoneGetData, ListZonesZoneGetResponse, CreateZoneZonePostData, CreateZoneZonePostResponse, CreateZoneZonePostError, DeleteZoneZoneZoneIdDeleteData, DeleteZoneZoneZoneIdDeleteResponse, DeleteZoneZoneZoneIdDeleteError, GetZoneZoneZoneIdGetData, GetZoneZoneZoneIdGetResponse, GetZoneZoneZoneIdGetError, UpdateZoneZoneZoneIdPatchData, UpdateZoneZoneZoneIdPatchResponse, UpdateZoneZoneZoneIdPatchError, ListReportsReportGetData, ListReportsReportGetResponse, ListReportsReportGetError, CreateReportReportPostData, CreateReportReportPostResponse, CreateReportReportPostError, DeleteReportReportReportIdDeleteData, DeleteReportReportReportIdDeleteResponse, DeleteReportReportReportIdDeleteError, GetReportReportReportIdGetData, GetReportReportReportIdGetResponse, GetReportReportReportIdGetError, UpdateReportReportReportIdPatchData, UpdateReportReportReportIdPatchResponse, UpdateReportReportReportIdPatchError, RootGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Users
 * Get all users.
 */
export const listUsersUserGet = <ThrowOnError extends boolean = false>(options?: Options<ListUsersUserGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersUserGetResponse, ListUsersUserGetError, ThrowOnError>({
        url: '/user/',
        ...options
    });
};

/**
 * Create User
 * Create a new user.
 */
export const createUserUserPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserUserPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserUserPostResponse, CreateUserUserPostError, ThrowOnError>({
        url: '/user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete User
 * Delete a user by ID.
 */
export const deleteUserUserUserIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserUserUserIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserUserUserIdDeleteResponse, DeleteUserUserUserIdDeleteError, ThrowOnError>({
        url: '/user/{user_id}',
        ...options
    });
};

/**
 * Get User
 * Get a specific user by ID.
 */
export const getUserUserUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserUserUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserUserUserIdGetResponse, GetUserUserUserIdGetError, ThrowOnError>({
        url: '/user/{user_id}',
        ...options
    });
};

/**
 * Update User
 * Update a user's information.
 */
export const updateUserUserUserIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateUserUserUserIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUserUserUserIdPatchResponse, UpdateUserUserUserIdPatchError, ThrowOnError>({
        url: '/user/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Session
 * Logout the user by clearing the session.
 */
export const deleteSessionSessionDelete = <ThrowOnError extends boolean = false>(options?: Options<DeleteSessionSessionDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/session/',
        ...options
    });
};

/**
 * Create Session
 * Signs in a user using a Google OAuth2 id token.
 *
 * If the user already exists in the database, logs them in.
 * Otherwise, registers a new user with a default role.
 */
export const createSessionSessionPost = <ThrowOnError extends boolean = false>(options: Options<CreateSessionSessionPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSessionSessionPostResponse, CreateSessionSessionPostError, ThrowOnError>({
        url: '/session/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Earthquakes
 * Get all earthquakes.
 */
export const listEarthquakesEarthquakeGet = <ThrowOnError extends boolean = false>(options?: Options<ListEarthquakesEarthquakeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListEarthquakesEarthquakeGetResponse, ListEarthquakesEarthquakeGetError, ThrowOnError>({
        url: '/earthquake/',
        ...options
    });
};

/**
 * Create Earthquake
 * Create a new earthquake.
 */
export const createEarthquakeEarthquakePost = <ThrowOnError extends boolean = false>(options: Options<CreateEarthquakeEarthquakePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateEarthquakeEarthquakePostResponse, CreateEarthquakeEarthquakePostError, ThrowOnError>({
        url: '/earthquake/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Earthquake
 * Delete a earthquake by ID.
 */
export const deleteEarthquakeEarthquakeEarthquakeIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteEarthquakeEarthquakeEarthquakeIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteEarthquakeEarthquakeEarthquakeIdDeleteResponse, DeleteEarthquakeEarthquakeEarthquakeIdDeleteError, ThrowOnError>({
        url: '/earthquake/{earthquake_id}',
        ...options
    });
};

/**
 * Get Earthquake
 * Get a specific earthquake by ID.
 */
export const getEarthquakeEarthquakeEarthquakeIdGet = <ThrowOnError extends boolean = false>(options: Options<GetEarthquakeEarthquakeEarthquakeIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEarthquakeEarthquakeEarthquakeIdGetResponse, GetEarthquakeEarthquakeEarthquakeIdGetError, ThrowOnError>({
        url: '/earthquake/{earthquake_id}',
        ...options
    });
};

/**
 * Update Earthquake
 * Update a earthquake's information.
 */
export const updateEarthquakeEarthquakeEarthquakeIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateEarthquakeEarthquakeEarthquakeIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateEarthquakeEarthquakeEarthquakeIdPatchResponse, UpdateEarthquakeEarthquakeEarthquakeIdPatchError, ThrowOnError>({
        url: '/earthquake/{earthquake_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Alerts
 * Get specified alerts.
 */
export const listAlertsAlertGet = <ThrowOnError extends boolean = false>(options?: Options<ListAlertsAlertGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAlertsAlertGetResponse, ListAlertsAlertGetError, ThrowOnError>({
        url: '/alert/',
        ...options
    });
};

/**
 * Create Alert
 * Create a new alert.
 */
export const createAlertAlertPost = <ThrowOnError extends boolean = false>(options: Options<CreateAlertAlertPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAlertAlertPostResponse, CreateAlertAlertPostError, ThrowOnError>({
        url: '/alert/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Alert
 * Delete a specific alert by ID.
 */
export const deleteAlertAlertAlertIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteAlertAlertAlertIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAlertAlertAlertIdDeleteResponse, DeleteAlertAlertAlertIdDeleteError, ThrowOnError>({
        url: '/alert/{alert_id}',
        ...options
    });
};

/**
 * Get Alert
 * Get a specific alert by ID.
 */
export const getAlertAlertAlertIdGet = <ThrowOnError extends boolean = false>(options: Options<GetAlertAlertAlertIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAlertAlertAlertIdGetResponse, GetAlertAlertAlertIdGetError, ThrowOnError>({
        url: '/alert/{alert_id}',
        ...options
    });
};

/**
 * Update Alert
 * Update alert state or fields.
 */
export const updateAlertAlertAlertIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateAlertAlertAlertIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateAlertAlertAlertIdPatchResponse, UpdateAlertAlertAlertIdPatchError, ThrowOnError>({
        url: '/alert/{alert_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Events
 * Get specified events.
 */
export const listEventsEventGet = <ThrowOnError extends boolean = false>(options?: Options<ListEventsEventGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListEventsEventGetResponse, ListEventsEventGetError, ThrowOnError>({
        url: '/event/',
        ...options
    });
};

/**
 * Create Event
 * Create a new event.
 */
export const createEventEventPost = <ThrowOnError extends boolean = false>(options: Options<CreateEventEventPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateEventEventPostResponse, CreateEventEventPostError, ThrowOnError>({
        url: '/event/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Event
 * Delete a event by ID.
 */
export const deleteEventEventEventIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteEventEventEventIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteEventEventEventIdDeleteResponse, DeleteEventEventEventIdDeleteError, ThrowOnError>({
        url: '/event/{event_id}',
        ...options
    });
};

/**
 * Get Event
 * Get a specific event by ID.
 */
export const getEventEventEventIdGet = <ThrowOnError extends boolean = false>(options: Options<GetEventEventEventIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventEventEventIdGetResponse, GetEventEventEventIdGetError, ThrowOnError>({
        url: '/event/{event_id}',
        ...options
    });
};

/**
 * Update Event
 * Update a event's information.
 */
export const updateEventEventEventIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateEventEventEventIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateEventEventEventIdPatchResponse, UpdateEventEventEventIdPatchError, ThrowOnError>({
        url: '/event/{event_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Zones
 * Get all zones.
 */
export const listZonesZoneGet = <ThrowOnError extends boolean = false>(options?: Options<ListZonesZoneGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListZonesZoneGetResponse, unknown, ThrowOnError>({
        url: '/zone/',
        ...options
    });
};

/**
 * Create Zone
 * Create a new zone.
 */
export const createZoneZonePost = <ThrowOnError extends boolean = false>(options: Options<CreateZoneZonePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateZoneZonePostResponse, CreateZoneZonePostError, ThrowOnError>({
        url: '/zone/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Zone
 * Delete a zone by ID.
 */
export const deleteZoneZoneZoneIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteZoneZoneZoneIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteZoneZoneZoneIdDeleteResponse, DeleteZoneZoneZoneIdDeleteError, ThrowOnError>({
        url: '/zone/{zone_id}',
        ...options
    });
};

/**
 * Get Zone
 * Get a specific zone by ID.
 */
export const getZoneZoneZoneIdGet = <ThrowOnError extends boolean = false>(options: Options<GetZoneZoneZoneIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetZoneZoneZoneIdGetResponse, GetZoneZoneZoneIdGetError, ThrowOnError>({
        url: '/zone/{zone_id}',
        ...options
    });
};

/**
 * Update Zone
 * Update a zone's information.
 */
export const updateZoneZoneZoneIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateZoneZoneZoneIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateZoneZoneZoneIdPatchResponse, UpdateZoneZoneZoneIdPatchError, ThrowOnError>({
        url: '/zone/{zone_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Reports
 * Get all reports.
 */
export const listReportsReportGet = <ThrowOnError extends boolean = false>(options?: Options<ListReportsReportGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListReportsReportGetResponse, ListReportsReportGetError, ThrowOnError>({
        url: '/report/',
        ...options
    });
};

/**
 * Create Report
 * Create a new report.
 */
export const createReportReportPost = <ThrowOnError extends boolean = false>(options: Options<CreateReportReportPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateReportReportPostResponse, CreateReportReportPostError, ThrowOnError>({
        url: '/report/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Report
 * Delete a report by ID.
 */
export const deleteReportReportReportIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteReportReportReportIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteReportReportReportIdDeleteResponse, DeleteReportReportReportIdDeleteError, ThrowOnError>({
        url: '/report/{report_id}',
        ...options
    });
};

/**
 * Get Report
 * Get a specific report by ID.
 */
export const getReportReportReportIdGet = <ThrowOnError extends boolean = false>(options: Options<GetReportReportReportIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetReportReportReportIdGetResponse, GetReportReportReportIdGetError, ThrowOnError>({
        url: '/report/{report_id}',
        ...options
    });
};

/**
 * Update Report
 * Update a report's information.
 */
export const updateReportReportReportIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateReportReportReportIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateReportReportReportIdPatchResponse, UpdateReportReportReportIdPatchError, ThrowOnError>({
        url: '/report/{report_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};